// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ3W/bNhB/919BaC/bikodugDDQLvAnLnF0GZBnO2dls42MYrUSMqNoel/Hyiq+v5a7bhZkZfAuvvxjryP31EKfvMQMnQAqajgc+cH95WDgPsioHw3d/64X738yXmzmGEiNfUZLGYIYU01g0WSuPfmR5piz0pmCCWJJHwHyF1RBipNDVyBr6ngRl1dfEPC+lqzOiKSIPcalC9pZFZlJip2P4BSZJebLo0jGsydJHFXMWPWsGNNVj2+F3zX4XXIr9HRLXLfEbWiwAJVyLEmGwZoK0kIc4cwVjgsXGKfEaU4CVveSwWyZhsbMiZ2UsQR8gVTc+fHinGEsBFG4BvlRxro/dz53vFORrxyr8ZBr5sQvQcSVCUIYSk+1iUIYeBaHhfZabFnH7oh98cIhhHvyQbYMKSSyU4g9hp7xF7rIFhvRNBYV6nvWjWMHrxS8EP7xozyv5D5A7ysaBMSU9F5FdlH7BnYYtieWWGiNeY3q/JvKQ/gAbm/Z3FTyAkgkuATDYHzTwBbEjONtoQp+C5NMYTRniiqFtcFysVeIU0S4EGadraW7alra/FPwmJzHINb5LKfUZI09V4GyM1OS6rJVwavJ7qeVuzZViv4wss6u+SGqoWCDX590MANZ56fEW5AaQhQ6WGEHK4uQQ5Pgz6KmJxKIb8QNYK4icMNyC/MMh1VNhqjL8Q0bXtLwTWhnPJdw3Kp+O9sZtMyTmdfEetgr3aDqqrKQuFxeLk70bmYLgvyGL29vgS9nchL5mz/Azqx8T47lZzWlpdqqp42yh/6xnr97aUob/N685LBAVj/nMaUb4UMCRvsludJ/jzJnyf5VzXJa30/hXzyGlmDPFD/875tPP4M75jfH0DvxdP4ePHohGXPisYn/R38HYPSaJy67kBFgiuYAH10fspTeQFyyuPTYJJc2qIR2+q5dq0lkJDyXZoilf0eaufBPdjItzZhxb27sOrP3MZTvP00FBVe6vxsu/YJI9Le27Oqrff++I2n/74z1tMd+qsxwHn17YZqZSnPtBtJoUV/W3+6mAhtAtgPWL54MaT+jRzIkP72qPd9fGFlb8Wg+28Grb+7HVLfxZtjh75R2i2aapNUOR6z4qtTVF8KPs3MW5OISodXnoc2b8jNJGcUtYyiSdZMqiYBbc4mQd9OO8hyvScyGne8n3YSk9deYIu4mrTVIK06ZXXcnCrsNMNe8U+ofwMAAP//mzn2+rYaAAA=",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWzW7jNhC+6ymmUg9rL+TcF7YPjZtdFLtpsA56WRQNbY1tATKpipSRQOS7F/yRSFlW4gLpqT5Ymhlpfr75ZsQEHiom2JYVsGLb+ohUEJEzGs0JUHLERSxYGS/nN2QZRUkCj2RTILAd3DIqkAoeNU1F6B5hdpcXyJWKmubnXV7gX/p1+LSA2T05olIp/Ggad//nh6S7n0QATZNCvoPZN+Sc7JGDUkbrPLdqpQCsm6+M7kNXd3VRhO6QZs5FCkgzSDtJh/mV1sfzGEb3bgGeBVKeMzqI0hlcKA1aWuAJC/A2E9KDqFSKne2a8GusTvl2AGOr9lX+2wpbbQo/1ltSkAr+IEWN8PhSos6aG2V60spUaOUkupognnJdZo548xJIke/pIq7y/UHEyzmBQ4W7RZwYdj6yUj83vyktSbv3o6aZrZBvq7zUpFYqyMaTqhfYw+BZbzx6Rlz0qnH/QvhdjkWmfUowtyANOCDhK9lgARKCN0FGElL9A3uFvuh+IEMMtX/Xb+krBdnRVscLm2rliX3aZGEeNyl/yGmGzzD73eTDIc6wrHBLBGaxzHBH6kLAjhQcJ0pNp6vOOptOW440DWWbCvqQWEBW1oMhiVLgxE9gAAxNzpWp1FKsvXpow9mJpB8XD/EvhOvLfX3cYDUG9RDuDu1x2IOBvgR9D3kr6/1IcprT/bnFpuek/xg6a5r/lNoZPrb7NU2XwSi43fcOcyBBm97qwRWAm+JGwX4LwgCMIQhotr9D4BK3AhhGlnAIycUN/v/l59OAoE+jDPU96bXgjJ3+s3UdQV8h5zcUB5a1HP2Of9fIRdud78hLRjm28mh3zhtxLp7LMvzo6ATG97dL6XyNO3WwzW0TnH4tKiTHnO6VAm7uO8idV1vZ0K3VX/BrDa85fmvwBj3m7anEtdfNZ5LA8CyhmzUr9cm07cY9E8hBwu3HjyDhN3IiIOHhRRzMgH1m2pRo1ZcH3ct68zLWNHu9OFv+z9sDIpo0ffNCNppTtMUwhpsl9FWu07qEbv7KMrTpgkLZVhZqPvd83a4PpCq7pw89Z7r6Vu6A/icAAP//o9X/quoLAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
